"use client"

import { useState } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { 
  Download, 
  FileText, 
  FileSpreadsheet, 
  Image, 
  Share2,
  Calendar,
  Filter,
  CheckCircle,
  Loader2,
  X
} from "lucide-react"
import { Button } from "./button"
import jsPDF from "jspdf"

interface TestResult {
  id: string
  date: string
  type: 'eye_disease' | 'color_blindness'
  predicted_class: string
  confidence: number
  status: 'normal' | 'abnormal' | 'uncertain'
  all_scores?: Record<string, number>
}

interface ExportFunctionalityProps {
  results: TestResult[]
  className?: string
  trigger?: React.ReactNode
}

export function ExportFunctionality({ 
  results, 
  className = "",
  trigger
}: ExportFunctionalityProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [exportType, setExportType] = useState<'pdf' | 'csv' | 'json'>('pdf')
  const [dateRange, setDateRange] = useState<'week' | 'month' | 'year' | 'all'>('all')
  const [includeCharts, setIncludeCharts] = useState(true)
  const [includeDetails, setIncludeDetails] = useState(true)
  const [isExporting, setIsExporting] = useState(false)
  const [exportSuccess, setExportSuccess] = useState(false)

  const filterResultsByDate = () => {
    const now = new Date()
    const cutoff = new Date()
    
    switch (dateRange) {
      case 'week':
        cutoff.setDate(now.getDate() - 7)
        break
      case 'month':
        cutoff.setMonth(now.getMonth() - 1)
        break
      case 'year':
        cutoff.setFullYear(now.getFullYear() - 1)
        break
      case 'all':
        return results
    }
    
    return results.filter(result => new Date(result.date) >= cutoff)
  }

  const generatePDF = async () => {
    const filteredResults = filterResultsByDate()
    
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
    })

    // Header
    doc.setFillColor(17, 24, 39)
    doc.rect(0, 0, 210, 297, 'F')
    
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(24)
    doc.text('Medical Test Results Report', 105, 25, { align: 'center' })
    
    doc.setFontSize(12)
    doc.setTextColor(200, 200, 200)
    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 105, 35, { align: 'center' })
    doc.text(`Period: ${dateRange.charAt(0).toUpperCase() + dateRange.slice(1)}`, 105, 42, { align: 'center' })

    // Summary Statistics
    let yPos = 60
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(18)
    doc.text('Summary Statistics', 20, yPos)
    yPos += 15

    const normalCount = filteredResults.filter(r => r.status === 'normal').length
    const abnormalCount = filteredResults.filter(r => r.status === 'abnormal').length
    const uncertainCount = filteredResults.filter(r => r.status === 'uncertain').length
    const avgConfidence = filteredResults.reduce((sum, r) => sum + r.confidence, 0) / filteredResults.length

    doc.setFontSize(12)
    doc.text(`Total Tests: ${filteredResults.length}`, 20, yPos)
    yPos += 8
    doc.text(`Normal Results: ${normalCount} (${Math.round((normalCount/filteredResults.length)*100)}%)`, 20, yPos)
    yPos += 8
    doc.text(`Abnormal Results: ${abnormalCount} (${Math.round((abnormalCount/filteredResults.length)*100)}%)`, 20, yPos)
    yPos += 8
    doc.text(`Uncertain Results: ${uncertainCount} (${Math.round((uncertainCount/filteredResults.length)*100)}%)`, 20, yPos)
    yPos += 8
    doc.text(`Average Confidence: ${Math.round(avgConfidence * 100)}%`, 20, yPos)
    yPos += 20

    if (includeDetails) {
      // Test Details
      doc.setFontSize(18)
      doc.text('Detailed Test Results', 20, yPos)
      yPos += 15

      filteredResults.forEach((result, index) => {
        if (yPos > 250) {
          doc.addPage()
          doc.setFillColor(17, 24, 39)
          doc.rect(0, 0, 210, 297, 'F')
          yPos = 20
        }

        doc.setFontSize(14)
        doc.setTextColor(59, 130, 246)
        doc.text(`Test ${index + 1}`, 20, yPos)
        yPos += 8

        doc.setFontSize(10)
        doc.setTextColor(255, 255, 255)
        doc.text(`Date: ${new Date(result.date).toLocaleDateString()}`, 30, yPos)
        yPos += 6
        doc.text(`Type: ${result.type.replace('_', ' ').toUpperCase()}`, 30, yPos)
        yPos += 6
        doc.text(`Result: ${result.predicted_class.replace('_', ' ').toUpperCase()}`, 30, yPos)
        yPos += 6
        doc.text(`Confidence: ${Math.round(result.confidence * 100)}%`, 30, yPos)
        yPos += 6
        doc.text(`Status: ${result.status.toUpperCase()}`, 30, yPos)
        yPos += 12
      })
    }

    // Footer
    doc.setFontSize(8)
    doc.setTextColor(150, 150, 150)
    doc.text('Generated by Hackloop Medical AI System', 105, 285, { align: 'center' })
    doc.text('This report is for informational purposes only. Consult healthcare professionals for medical advice.', 105, 290, { align: 'center' })

    return doc
  }

  const generateCSV = () => {
    const filteredResults = filterResultsByDate()
    
    const headers = [
      'Date',
      'Test Type',
      'Result',
      'Confidence (%)',
      'Status'
    ]

    if (includeDetails) {
      headers.push('All Scores')
    }

    const csvContent = [
      headers.join(','),
      ...filteredResults.map(result => {
        const row = [
          new Date(result.date).toLocaleDateString(),
          result.type.replace('_', ' '),
          result.predicted_class.replace('_', ' '),
          Math.round(result.confidence * 100),
          result.status
        ]

        if (includeDetails && result.all_scores) {
          const scores = Object.entries(result.all_scores)
            .map(([condition, score]) => `${condition}:${Math.round(score * 100)}%`)
            .join(';')
          row.push(`"${scores}"`)
        }

        return row.join(',')
      })
    ].join('\n')

    return csvContent
  }

  const generateJSON = () => {
    const filteredResults = filterResultsByDate()
    
    const exportData = {
      metadata: {
        generated: new Date().toISOString(),
        period: dateRange,
        totalTests: filteredResults.length,
        summary: {
          normal: filteredResults.filter(r => r.status === 'normal').length,
          abnormal: filteredResults.filter(r => r.status === 'abnormal').length,
          uncertain: filteredResults.filter(r => r.status === 'uncertain').length,
          averageConfidence: filteredResults.reduce((sum, r) => sum + r.confidence, 0) / filteredResults.length
        }
      },
      results: includeDetails ? filteredResults : filteredResults.map(r => ({
        id: r.id,
        date: r.date,
        type: r.type,
        predicted_class: r.predicted_class,
        confidence: r.confidence,
        status: r.status
      }))
    }

    return JSON.stringify(exportData, null, 2)
  }

  const handleExport = async () => {
    setIsExporting(true)
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1000)) // Simulate processing

      const filteredResults = filterResultsByDate()
      const timestamp = new Date().toISOString().split('T')[0]
      const filename = `medical-test-results-${timestamp}`

      if (exportType === 'pdf') {
        const doc = await generatePDF()
        doc.save(`${filename}.pdf`)
      } else if (exportType === 'csv') {
        const csvContent = generateCSV()
        const blob = new Blob([csvContent], { type: 'text/csv' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `${filename}.csv`
        a.click()
        URL.revokeObjectURL(url)
      } else if (exportType === 'json') {
        const jsonContent = generateJSON()
        const blob = new Blob([jsonContent], { type: 'application/json' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `${filename}.json`
        a.click()
        URL.revokeObjectURL(url)
      }

      setExportSuccess(true)
      setTimeout(() => {
        setExportSuccess(false)
        setIsOpen(false)
      }, 2000)
    } catch (error) {
      console.error('Export failed:', error)
    } finally {
      setIsExporting(false)
    }
  }

  const getFileIcon = () => {
    switch (exportType) {
      case 'pdf': return <FileText className="w-5 h-5" />
      case 'csv': return <FileSpreadsheet className="w-5 h-5" />
      case 'json': return <FileSpreadsheet className="w-5 h-5" />
      default: return <Download className="w-5 h-5" />
    }
  }

  const DefaultTrigger = () => (
    <Button
      onClick={() => setIsOpen(true)}
      variant="outline"
      className={`border-blue-500/50 text-white hover:bg-blue-500/10 ${className}`}
    >
      <Download className="w-4 h-4 mr-2" />
      Export Data
    </Button>
  )

  return (
    <>
      {trigger ? (
        <div onClick={() => setIsOpen(true)}>
          {trigger}
        </div>
      ) : (
        <DefaultTrigger />
      )}

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 bg-black/70 flex items-center justify-center p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-gray-900 rounded-xl p-6 w-full max-w-md border border-gray-700"
            >
              {/* Header */}
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-bold text-white flex items-center">
                  {getFileIcon()}
                  <span className="ml-2">Export Test Results</span>
                </h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsOpen(false)}
                  className="text-gray-400 hover:text-white"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>

              {exportSuccess ? (
                <motion.div
                  initial={{ scale: 0.8, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  className="text-center py-8"
                >
                  <CheckCircle className="w-16 h-16 text-green-400 mx-auto mb-4" />
                  <h4 className="text-lg font-semibold text-white mb-2">Export Successful!</h4>
                  <p className="text-gray-400">Your file has been downloaded successfully.</p>
                </motion.div>
              ) : (
                <div className="space-y-6">
                  {/* Export Type */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-3">Export Format</label>
                    <div className="grid grid-cols-3 gap-2">
                      {[
                        { type: 'pdf', label: 'PDF Report', icon: FileText },
                        { type: 'csv', label: 'CSV Data', icon: FileSpreadsheet },
                        { type: 'json', label: 'JSON Data', icon: FileSpreadsheet }
                      ].map(({ type, label, icon: Icon }) => (
                        <button
                          key={type}
                          onClick={() => setExportType(type as any)}
                          className={`p-3 rounded-lg border text-center transition-colors ${
                            exportType === type
                              ? 'border-blue-500 bg-blue-500/20 text-blue-400'
                              : 'border-gray-600 text-gray-400 hover:border-gray-500'
                          }`}
                        >
                          <Icon className="w-5 h-5 mx-auto mb-1" />
                          <div className="text-xs">{label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Date Range */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">Date Range</label>
                    <select
                      value={dateRange}
                      onChange={(e) => setDateRange(e.target.value as any)}
                      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white"
                    >
                      <option value="week">Last Week</option>
                      <option value="month">Last Month</option>
                      <option value="year">Last Year</option>
                      <option value="all">All Time</option>
                    </select>
                  </div>

                  {/* Options */}
                  <div className="space-y-3">
                    <label className="flex items-center text-sm text-gray-300">
                      <input
                        type="checkbox"
                        checked={includeDetails}
                        onChange={(e) => setIncludeDetails(e.target.checked)}
                        className="mr-3 rounded"
                      />
                      Include detailed test results
                    </label>
                    
                    {exportType === 'pdf' && (
                      <label className="flex items-center text-sm text-gray-300">
                        <input
                          type="checkbox"
                          checked={includeCharts}
                          onChange={(e) => setIncludeCharts(e.target.checked)}
                          className="mr-3 rounded"
                        />
                        Include charts and visualizations
                      </label>
                    )}
                  </div>

                  {/* Preview */}
                  <div className="bg-gray-800 rounded-lg p-3 border border-gray-700">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-400">Tests to export:</span>
                      <span className="text-white font-medium">{filterResultsByDate().length}</span>
                    </div>
                  </div>

                  {/* Export Button */}
                  <Button
                    onClick={handleExport}
                    disabled={isExporting}
                    className="w-full bg-blue-600 hover:bg-blue-700 text-white"
                  >
                    {isExporting ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Exporting...
                      </>
                    ) : (
                      <>
                        <Download className="w-4 h-4 mr-2" />
                        Export {exportType.toUpperCase()}
                      </>
                    )}
                  </Button>
                </div>
              )}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}

export default ExportFunctionality